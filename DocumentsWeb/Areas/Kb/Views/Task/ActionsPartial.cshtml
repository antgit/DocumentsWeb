@using BusinessObjects
@using BusinessObjects.Security
@using BusinessObjects.Web.Core
@using DocumentsWeb.Areas.Reports.Models
@using DocumentsWeb.Models
@model DocumentsWeb.Areas.Kb.Models.TaskModel
<script src="@Url.Content("~/Scripts/jDateTime.js")" type="text/javascript"></script>

@{
    int doneTaskId = WADataProvider.WA.Cashe.GetCasheData<Analitic>().ItemCode<Analitic>("TASK_STATE_DONE").Id;
    int notDoneTaskId = WADataProvider.WA.Cashe.GetCasheData<Analitic>().ItemCode<Analitic>("TASK_STATE_NOTDONE").Id;
    int inprogressTaskId = WADataProvider.WA.Cashe.GetCasheData<Analitic>().ItemCode<Analitic>("TASK_STATE_INPROGRESS").Id;
    
    bool haveEdit = WADataProvider.LibrariesElementRightView.IsAllow(Right.UIEDIT, WebModuleNames.WEB_TASKS) && !WADataProvider.CommonRightView.ReadOnly;
}
<script type="text/javascript">
    var doneTaskId = @doneTaskId;
    var notDoneTaskId = @notDoneTaskId;
    var inprogressTaskId = @inprogressTaskId;       
    function showUserFlags() {
        if (typeof pcEditFlags === "undefined") {
            LoadingPanel.Show();  
            $.ajax({
                type: "POST",
                url: "@Url.Action("ShowUserFlagsPartial", new { modelId =@Model.ModelId})",
                success: function (response) {
                    $("#popupDivShowUserFlags").html(response);
                    LoadingPanel.Hide(); 
                    pcEditFlags.ShowAtPos(($(document).width() - 550) / 2, ($(document).height() - 520) / 2);
                }
            });
        }
        else {
            pcEditFlags.ShowAtPos(($(document).width() - 550) / 2, ($(document).height() - 520) / 2);
        }
    }
    function ShowPeopleFinderCreator() {     
    if (typeof PeopleFinderCreator === "undefined") {
        LoadingPanel.Show();  
        $.ajax({
            type: "POST",
            url: "@Url.Action("ShowPeopleFinderCreatorPartial")",
            success: function (response) {
                $("#popupDivPeopleFinderCreator").html(response);
                LoadingPanel.Hide(); 
                PeopleFinderCreator.Show();
            }
        });
    }
    else {
        PeopleFinderCreator.Show();
    }
}
    function ShowPeopleFinderAuthor() {

        if (typeof PeopleFinderAuthor === "undefined") {
            LoadingPanel.Show();
            $.ajax({
                type: "POST",
                url: "@Url.Action("ShowPeoplesFinderAutorPartial")",
                success: function(response) {
                    $("#popupDivPeopleFinderAuthor").html(response);
                    LoadingPanel.Hide();
                    PeopleFinderAuthor.Show();
                }
            });
        } else {
            PeopleFinderAuthor.Show();
        }
    }
</script>
<script src="@Url.Content("~/Scripts/kb/task.js")" type="text/javascript"></script>
@Html.DevExpress().NavBar(
settings =>
{
    settings.Name = "nbFeatures";
    settings.AllowExpanding = true;
    settings.AllowSelectItem = true;
    settings.AutoCollapse = false;
    settings.EnableHotTrack = true;
    settings.EnableAnimation = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
    
    settings.EncodeHtml = false;
    settings.SaveStateToCookies = true;
    settings.SaveStateToCookiesID = Url.RequestContext.RouteData.Values["controller"] + "Nav";

    settings.Groups.Add(group => {
        group.Text = "Действия";
        group.HeaderStyle.Font.Bold = true;
        group.ItemLinkMode = GroupItemLinkMode.TextAndImage;
        group.ItemStyle.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(2);
        group.ItemStyle.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(2);
        group.ItemStyle.CssClass = "navpanellink";
        group.HeaderImage.Url = Url.Content("~/Images/okey_x16.png");

        group.Items.Add(item =>
        {
            item.Text = "Закрыть";
            item.ToolTip = "Закрыть текущий документ без сохранения";
            item.Image.Url = "~/Images/cross.png";
            item.NavigateUrl = "javascript:window.open('', '_self', ''); window.close();";
        });
        if (haveEdit)
        {
            group.Items.Add(item =>
            {
                item.Text = "Сохранить";
                item.ToolTip = "Сохранить текущий документ возможно если заполнены все необходимые данные, требуемые для корректного оформления документа. Для больших документов рекомендуется сохраняться как можно чаще";
                item.Image.Url = "~/Images/SAVE_X16.png";
                item.Enabled = !Model.IsReadOnly;
                item.NavigateUrl = "javascript:document.getElementById('documentEditForm').submit()";
            });
            group.Items.Add(item =>
            {
                item.Text = "Сохранить и закрыть";
                item.ToolTip = "Сохранить текущий документ и закрыть если сохранение прошло успешно";
                item.Image.Url = "~/Images/SAVE_X16.png";
                item.Enabled = !Model.IsReadOnly;
                item.NavigateUrl = "javascript:actionSaveClose()";
            });

            if (WebReportModel.IsReportAllow("WEBREP_TASK_INFO"))
            {
                group.Items.Add(item =>
                {
                    item.Text = "Печать";
                    item.Image.Url = "~/Images/STIREPORT_X16.png";
                    item.ToolTip = "Печатное представление задачи";
                    item.Target = "_blank";
                    Library report = WADataProvider.WA.Cashe.GetCasheData<Library>().ItemCode<Library>("WEBREP_TASK_INFO");
                    if (report != null)
                    {
                        item.NavigateUrl = ReportHelper.GetPrintFormNavigateUrlInternal(report, "TASK", Model.Id);
                    }
                });
            }

            if (WebReportModel.IsReportAllow("WEBREP_TASK_INFOV2"))
            {
                group.Items.Add(item =>
                {
                    item.Text = "Печать (кратко)";
                    item.Image.Url = "~/Images/STIREPORT_X16.png";
                    item.ToolTip = "Печатное представление задачи в кратком представлении";
                    item.Target = "_blank";
                    Library report = WADataProvider.WA.Cashe.GetCasheData<Library>().ItemCode<Library>("WEBREP_TASK_INFOV2");
                    if (report != null)
                    {
                        item.NavigateUrl = ReportHelper.GetPrintFormNavigateUrlInternal(report, "TASK", Model.Id);
                    }
                });
            }
            group.Items.Add(item => item.SetTemplateContent(s => ViewContext.Writer.Write("<hr>")));

            group.Items.Add(item =>
            {
                item.Text = "Отметить как выполненную";
                item.ToolTip = "Установка состояния задачи как выполненной, изменения отражаются на форме документа. Не забудьте сохранить изменений!";
                item.Image.Url = "~/Images/OK_X16.png";
                item.Enabled = !Model.IsReadOnly;
                item.NavigateUrl = "javascript:markTaskAsCompleted()";
            });
            group.Items.Add(item =>
            {
                item.Text = "Отметить как не выполненную";
                item.ToolTip = "Установка состояния задачи как не выполненную, изменения отражаются на форме документа. Не забудьте сохранить изменений!";
                item.Image.Url = "~/Images/cross.png";
                item.Enabled = !Model.IsReadOnly;
                item.NavigateUrl = "javascript:markTaskUnCompleted()";
            });

            group.Items.Add(item =>
            {
                item.Text = "Отметить как выполняемую";
                item.ToolTip = "Установка состояния задачи как выполняемое, изменения отражаются на форме документа. Не забудьте сохранить изменений!";
                item.Image.Url = "~/Images/warning_x16.png";
                item.Enabled = !Model.IsReadOnly;
                item.NavigateUrl = "javascript:markTaskInProgress()";
            });
        }
        
        group.Items.Add(item =>
        {
            item.Text = "Пользовательские флаги";
            item.ToolTip = "Установка дополнительных флагов, в основном используемых как \"Тема\" задачи. Не забудьте сохранить изменений!";
            item.Image.Url = "~/Images/information.png";
            item.Enabled = !Model.IsReadOnly;
            item.NavigateUrl = "javascript:showUserFlags()";
        });

        group.Items.Add(item =>
        {
            item.Text = "Показать/скрыть поля";
            item.ToolTip = "Показать или скрыть дополнительные поля \"Признак\" и \"Наименование\". Поле \"Наименование\" формируется автоматически при первом сохранении задачи на основе описания задачи. Не забудьте сохранить изменений!";
            item.Image.Url = "~/Images/gear.png";
            item.NavigateUrl = "javascript:toggleAdditionalFields()";
        });

        if (Model.IsReadOnly)
        {
            if (WADataProvider.CurrentUser.Groups.FirstOrDefault(s => s.Name == Uid.GROUP_GROUPSYSTEMADMIN || s.Name == Uid.GROUP_GROUPWEBADMIN) != null)
            {
                group.Items.Add(item =>
                {
                    item.Text = "Разрешить изменения";
                    item.ToolTip = "Снять блокировку изменений в задаче!";
                    item.Image.Url = "~/Images/UNLOCK16.png";
                    item.NavigateUrl = "javascript:makeNotReadOnly()";
                });    
            } 
        }
        else
        {
            if (WADataProvider.CurrentUser.Id == Model.UserOwnerId || WADataProvider.CurrentUser.Groups.FirstOrDefault(s => s.Name == Uid.GROUP_GROUPSYSTEMADMIN || s.Name == Uid.GROUP_GROUPWEBADMIN) != null)
            {
                group.Items.Add(item =>
                    {
                        item.Text = "Запретить изменения";
                        item.ToolTip = "Установить блокировку изменений в задаче (перевести в состояние только чтение)!";
                        item.Image.Url = "~/Images/SECURITY_X16.png";
                        item.NavigateUrl = "javascript:makeReadOnly()";
                    });
            }
        }        

        
    });

    if (haveEdit && !Model.IsReadOnly)
    {
        settings.Groups.Add(group =>
                                {
                                    group.Text = "Плановое завершение";
                                    group.HeaderImage.Url = Url.Content("~/Images/calendar.png");
                                    group.ItemLinkMode = GroupItemLinkMode.TextAndImage;
                                    group.ItemStyle.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(2);
                                    group.ItemStyle.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(2);
                                    group.ItemStyle.CssClass = "navpanellink";

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец месяца";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец текущего месяца";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfMonth()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец следующего месяца";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец следующего месяца";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfNextMonth()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item => item.SetTemplateContent(s => ViewContext.Writer.Write("<hr>")));

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец недели";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец текущей недели";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfWeek()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец следующей недели";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец следующей недели";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfNextWeek()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец в конце двух недель";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец слудующих двух недель";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfTwoWeeks()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Конец в конце трех недель";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конец слудующих трех недели";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetEndOfThreeWeeks()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item => item.SetTemplateContent(s => ViewContext.Writer.Write("<hr>")));

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Сегодня";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конце сегодняшнего дня";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(new Date()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Завтра";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи в конце завтрашнего дня";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetTomorrow()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });

                                    group.Items.Add(item =>
                                                        {
                                                            item.Text = "Послезавтра";
                                                            item.ToolTip = "Установить срок планового завершения поставленной задачи на послезавтра, в конце дня";
                                                            item.Image.Url = "~/Images/OK_X16.png";
                                                            item.NavigateUrl = "javascript:{DateEndPlan.SetDate(GetDayAfterTomorrow()); DateEndPlanTimeAsDate.SetDate(new Date(2012, 1, 1, 23, 59));}";
                                                        });
                                });
    }
    
}).GetHtml()

@Html.Partial("WaitViewPartial");