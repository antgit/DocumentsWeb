@using BusinessObjects.Security
@using DocumentsWeb.Models
@using BusinessObjects
@model DocumentsWeb.Areas.Contracts.Models.DocumentContractModel
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    string helpDefaultLink = string.Empty;
    if (ViewData.ContainsKey("HelpDefaultLink"))
    {
        helpDefaultLink = ViewData["HelpDefaultLink"].ToString();
    }
    bool hasPopupHelp = false;
    if (ViewData.ContainsKey("HelpHasPopup"))
    {
        hasPopupHelp = (bool)ViewData["HelpHasPopup"];
    } 
}
<script src="@Url.Content("~/Scripts/contracts/doccontract.js")" type="text/javascript"></script>
<script type="text/javascript">
    var hasCustomHelp = '@hasPopupHelp';
    var globalNotReadOnly = '!@Model.IsReadOnly';

    function OnMenuItemClick(s, e) {
        switch (e.item.name) {
            case "mnuClose":
                window.open('', '_self', '');
                window.close();
                break;
            case "mnuSave":
                document.getElementById('documentEditForm').submit();
                break;
            case "mnuConduct":
                document.getElementById('StateId').value=@State.STATEACTIVE;
                alert("Документ будет проведен после сохранения");
                break;
            case "mnuIgnore":
                document.getElementById('StateId').value=@State.STATEDEFAULT;
                alert("Изменения будут применены после сохранения");
                break;
            case "mnuBlock":
                document.getElementById('IsReadOnly').value=true;
                alert("Документ будет заблокирован после сохранения");
                break;
            case "mnuUnblock":
                document.getElementById('IsReadOnly').value=false;
                mEdit.GetItemByName("mnuSave").SetEnabled(true);
                alert("Изменения будут применены после сохранения");
                break;
            case "mnuPrint":
                break;
        }
    }
    function AgentFromId_ButtonClick(s, e) {
        switch(e.buttonIndex){
//            case 0:
//                pcEdit.Load('@DevExpressHelper.GetUrl(new {Area = "Agents", Controller = "Byer", Action = "Edit" })/' + 0, 700, 520);
//                break;
//            case 1:
//                if(MainClientDepatmentId.GetValue()!=null) {
//                    pcEdit.Load('@DevExpressHelper.GetUrl(new {Area = "Agents", Controller = "Byer", Action = "Edit" })/' + MainClientDepatmentId.GetValue(), 650, 360);
//                }
//                else {
//                    alert('Сначала необходимо выбрать корреспондента');
//                }
//                break;
            case 0:
                ShowClientsFinder();
                break;
            default:
                alert(e.buttonIndex);
                break;
        }
    }
    function ShowClientsFinder() {
        if (typeof ClientsFinderAgentFrom === "undefined") {
            LoadingPanel.Show();
            $.ajax({
                type: "POST",
                url: "@Url.Action("ClientsFinderPartial")",
                success: function(response) {
                    $("#popupDivAgent").html(response);
                    LoadingPanel.Hide();
                    ClientsFinderAgentFrom.Show();
                },
                error: function(req, status, error) { alert(error); }
            });
        }
        else {
           ClientsFinderAgentFrom.Show(); 
        }
    }
</script>

@Html.DevExpress().Menu(settings =>
{
    settings.EnableHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Name = "mEdit";
    settings.ClientSideEvents.ItemClick = "OnMenuItemClick";

    settings.Items.Add(item =>
    {
        item.Name = "mnuClose";
        item.Text = "Закрыть";
        item.Image.Url = @Url.Content("~/Images/cross.png"); 
    });
    settings.Items.Add(item =>
    {
        item.Name = "mnuSave";
        item.Text = "Сохранить";
        item.ClientEnabled = !Model.IsReadOnly;
        item.Image.Url = @Url.Content("~/Images/SAVE_X16.png"); 
    });
    settings.Items.Add(item =>
    {
        item.Name = "mnuConduct";
        item.Text = "Провести";
        item.Enabled = (!Model.IsReadOnly) && Model.StateId != State.STATEACTIVE && Model.Id != 0;
        item.ClientVisible = item.Enabled;
        item.Image.Url = @Url.Content("~/Images/OK_X16.png");
    });
    
        settings.Items.Add(item =>
        {
            item.Name = "mnuIgnore";
            item.Text = "Не учитывать";
            item.Enabled = (Model.StateId == State.STATEACTIVE) && (!Model.IsReadOnly) && Model.Id != 0;
            item.ClientVisible = item.Enabled;
            item.Image.Url = @Url.Content("~/Images/ROLLBACKRED_X16.png");
        });
        if (WADataProvider.FolderElementRightView.IsAllow(Right.DOCLOCK, WADataProvider.WA.GetFolderByCodeFind(Folder.CODE_FIND_CONTRACTS_VERIFICATION).Id))
        {
            settings.Items.Add(item =>
                {
                    item.Name = "mnuBlock";
                    item.Text = "Заблокировать";
                    item.Enabled = !Model.IsReadOnly && Model.Id != 0 && (Model.StateId == State.STATEACTIVE);
                    item.ClientVisible = item.Enabled;
                    item.Image.Url = @Url.Content("~/Images/SECURITY_X16.png");
                });
        }
        if (WADataProvider.FolderElementRightView.IsAllow(Right.DOCUNLOCK, WADataProvider.WA.GetFolderByCodeFind(Folder.CODE_FIND_CONTRACTS_VERIFICATION).Id))
    {
        settings.Items.Add(item =>
        {
            item.Name = "mnuUnblock";
            item.Text = "Разблокировать";
            item.Enabled = Model.IsReadOnly && Model.Id != 0;
            item.ClientVisible = item.Enabled;
            item.Image.Url = @Url.Content("~/Images/UNLOCK16.png");
        });
    }
    List<Library> printForms = ViewData["PrintForms"] as List<Library>;
    if (printForms != null)
    {
        switch (printForms.Count)
        {
            case 0:
                break;
            case 1:
                settings.Items.Add(item =>
                {
                    item.Name = "mnuPrint";
                    item.Text = "Печать";
                    item.Image.Url = @Url.Content("~/Images/PRINT_X16.png");
                    item.Target = "_blank";
                    item.NavigateUrl = DevExpressHelper.GetUrl(new
                    {
                        Controller = Url.RequestContext.RouteData.Values["controller"].ToString(),
                        Action = "PrintDefault",
                        Area = "Contracts",
                        documentId = Model.Id
                    });

                });
                break;
            default:
                MVCxMenuItem itemPrint = new MVCxMenuItem { Name = "mnuPrint", Text = "Печать", Image = { Url = Url.Content("~/Images/PRINT_X16.png") } };
                settings.Items.Add(itemPrint);
                foreach (Library form in printForms)
                {
                    itemPrint.Items.Add(subItem =>
                    {
                        subItem.Name = "mnuPrint";
                        subItem.Text = form.Name;
                        subItem.Target = "_blank";
                        subItem.NavigateUrl = DevExpressHelper.GetUrl(new
                        {
                            Controller = Url.RequestContext.RouteData.Values["controller"].ToString(),
                            Action = "Print",
                            Area = "Contracts",
                            documentId = Model.Id,
                            printFormId = form.Id
                        });
                        if (!string.IsNullOrEmpty(form.Memo))
                            subItem.ToolTip = form.Memo;
                    });
                }
                break;
        }
    }
    if (!string.IsNullOrEmpty(helpDefaultLink))
    {

        settings.Items.Add(item =>
        {
            item.Name = "mnuHelp";
            item.Text = "Помощь";
            item.ToolTip = "Показать справочную документацию по работе с документом";
            item.Image.Url = Url.Content("~/Images/HELP_X16.gif");
            if (hasPopupHelp)
            {
                item.SetSubMenuTemplateContent(content =>
                {
                    ViewContext.Writer.Write("<div id=\"HelpPanel\"></div>");
                });
            }
            else
            {
                if (helpDefaultLink.StartsWith("~/"))
                    item.NavigateUrl = Url.Content(helpDefaultLink);
                else
                    item.NavigateUrl = helpDefaultLink;
            }
            item.Target = "_blank";
        });
    }
}).GetHtml()

    @Html.DevExpress().Splitter(settings =>
{
    settings.Name = "splFullScreenMode";
    settings.Orientation = System.Web.UI.WebControls.Orientation.Vertical;
    settings.Styles.Pane.Paddings.Padding = 0;
    settings.FullscreenMode = true;

    settings.Panes.Add(contentMain =>
    {
        contentMain.Panes.Add(actionsPane =>
        {
            actionsPane.Name = "ActionPane";
            actionsPane.Size = 270;
            actionsPane.MinSize = 270;
            actionsPane.MaxSize = 400;
            actionsPane.AllowResize = DefaultBoolean.True;
            actionsPane.ShowCollapseBackwardButton = DefaultBoolean.False;
            actionsPane.SetContent(() => Html.RenderPartial("ActionsPartial", Model));
        });

        contentMain.Panes.Add(contentPane =>
        {
            contentPane.Name = "ContentPane";
            contentPane.ScrollBars = System.Web.UI.WebControls.ScrollBars.Auto;
            contentPane.SetContent(() => @Html.RenderPartial("EditPartial", Model));
        });
        settings.Panes.Add(footerPane =>
        {
            footerPane.Size = 80;
            footerPane.AllowResize = DefaultBoolean.False;
            footerPane.ShowSeparatorImage = DefaultBoolean.False;
            footerPane.SetContent(() => @Html.RenderPartial("FooterDocumentPartial"));
        });
    });
}).GetHtml()
<div id="popupDivAgent"></div>


@Html.Partial("PeoplesFinderPartial", new ViewDataDictionary { 
    { "Name", "PeopleFinderRegistrator" },
    { "ComboboxName", "RegistratorId" },
    { "ComboboxButtonIndex", 0 },
    { "onlyUsers", true },
    { "ComboboxMyCompany", GlobalPropertyNames.MainCompanyDepatmentId },
    //{ "showAgentsInChains", true},
    { "myCompanyId", Model.MainClientDepatmentId}
})