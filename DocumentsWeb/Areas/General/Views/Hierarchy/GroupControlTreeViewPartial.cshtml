@using DevExpress.Web.Mvc.UI
@using DevExpress.Web.ASPxTreeView
@using DocumentsWeb
@using DocumentsWeb.Areas.General.Models

@{
    string[] RootList = (string[])ViewContext.RequestContext.RouteData.Values["RootList"] == null ? (string[])ViewData["RootList"] : (string[])ViewContext.RequestContext.RouteData.Values["RootList"];
    string InHies = (string)ViewData["InHies"];
    bool IsReadonly = ViewData["IsReadonly"] == null ? false : bool.Parse(ViewData["IsReadonly"].ToString());
    string[] Hies = new string[0];
    if  (InHies != null && InHies.Length > 0) {
        Hies = InHies.Split(',');
    }
    List<HierarchyModel> _RootList = new List<HierarchyModel>();
    
    if (RootList != null)
    {
        foreach (string r in RootList)
        {
            _RootList.Add(HierarchyModel.GetObject(r));
        }
    }
}

@Html.DevExpress().TreeView(settings =>
{
    settings.Name = "tvHierarchiesFilter";
    settings.AllowSelectNode = false;
    settings.AllowCheckNodes = true;
    settings.EnableAnimation = true;
    settings.CallbackRouteValues = new { Area = "General", Controller = "Hierarchy", Action = "GroupControlTreeViewPartial" };
    settings.EnableHotTrack = true;
    settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

    settings.ClientSideEvents.BeginCallback = "function (s, e) { e.customArgs['RootList'] = '" + String.Join(",", RootList) + "'; e.customArgs['InHies'] = $('#InHierarchies').val(); }";
    settings.ClientSideEvents.CheckedChanged = "tvHierarchiesFilter_CheckedChanged";
    
    settings.Style.Add("margin-left", "-10px");
    settings.Style.Add("height", "auto");
    settings.Enabled = !IsReadonly;
      
    settings.Styles.Node.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.Node.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeImage.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeImage.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeText.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeText.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeCheckBox.Paddings.PaddingTop = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.Styles.NodeCheckBox.Paddings.PaddingBottom = System.Web.UI.WebControls.Unit.Pixel(1);
      
    //settings.ClientSideEvents.CheckedChanged = "HierarchyFilter_CheckedChanged";
    settings.VirtualModeCreateChildren = (source, e) =>
    {
        List<TreeViewVirtualNode> children = new List<TreeViewVirtualNode>();

        int id = e.NodeName != null ? int.Parse(e.NodeName) : 0;

        if (id == 0)
        {
            foreach (HierarchyModel model in _RootList)
            {
                TreeViewVirtualNode node = new TreeViewVirtualNode(model.Id.ToString(), model.Name, Url.Content("~/Images/root_folder_x16.png"));
                node.IsLeaf = !model.HasChild;
                node.Expanded = true;
                if (Hies.Contains(model.Id.ToString()))
                {
                    node.Checked = true;
                }
                children.Add(node);
            }
        }
        else
        {
            List<HierarchyModel> list = HierarchyModel.GetBranch(id);
            foreach (HierarchyModel model in list)
            {
                TreeViewVirtualNode node = new TreeViewVirtualNode(model.Id.ToString(), model.Name, Url.Content("~/Images/folder_x16.png"));
                node.IsLeaf = !model.HasChild;
                if (Hies.Contains(model.Id.ToString()))
                {
                    node.Checked = true;
                }
                children.Add(node);
            }
        }
        e.Children = children;
    };
}).GetHtml()