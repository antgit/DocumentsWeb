@using System.Globalization
@using DevExpress.Web.Mvc.UI;
@using DocumentsWeb.Areas.Analitics.Models;
@using DocumentsWeb.Models;
@using BusinessObjects.Security;
@using BusinessObjects.Web.Core;
@using DocumentsWeb.Controllers;
@using BusinessObjects;
@using DocumentsWeb.Areas.General.Models;

@{
    bool haveEdit = WADataProvider.LibrariesElementRightView.IsAllow(Right.UIEDIT, WebModuleNames.WEB_MODULE_DICTIONARY_ANALITICCONTRACTPRIORITY) && !WADataProvider.CommonRightView.ReadOnly;
    bool haveDelete = WADataProvider.LibrariesElementRightView.IsAllow(Right.UITRASH, WebModuleNames.WEB_MODULE_DICTIONARY_ANALITICCONTRACTPRIORITY) && !WADataProvider.CommonRightView.ReadOnly;
    bool haveView = WADataProvider.LibrariesElementRightView.IsAllow(Right.UIVIEW, WebModuleNames.WEB_MODULE_DICTIONARY_ANALITICCONTRACTPRIORITY);
}

@Html.DevExpress().GridView( settings => {
    settings.Name = "dxGridViewAnalitic";
    settings.CallbackRouteValues = new { Controller = "AnaliticContractPriority", Action = "IndexPartial" };
    
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
    settings.KeyFieldName = GlobalPropertyNames.Id;
    settings.ClientVisible = false;
    settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
    
    
    settings.SettingsBehavior.AllowFocusedRow = true;

    settings.Settings.ShowGroupPanel = DocumentsWeb.Code.LayoutHelper.GetCurrentSetting(Url.RequestContext.RouteData.Values["controller"].ToString()).Current.ShowGroupPanel;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowFilterRow = DocumentsWeb.Code.LayoutHelper.GetCurrentSetting(Url.RequestContext.RouteData.Values["controller"].ToString()).Current.ShowFilterPanel;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
    settings.Settings.ShowVerticalScrollBar = true;
    
    settings.SettingsPager.PageSize = Utils.GetPageSize(settings);
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.Top;
    settings.SettingsPager.AlwaysShowPager = true;

    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.SettingsPopup.CustomizationWindow.VerticalAlign = PopupVerticalAlign.Below;
    settings.SettingsPopup.CustomizationWindow.HorizontalAlign = PopupHorizontalAlign.OutsideRight;

    settings.Settings.ShowVerticalScrollBar = true;
    settings.Settings.ShowHorizontalScrollBar = true;

    settings.KeyboardSupport = true;

    settings.Styles.Cell.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(2);
    
    settings.Columns.Add(cc =>
    {
        cc.Name = "colImageAction";
        if (haveEdit || haveView || haveDelete)
        {
            cc.Width = System.Web.UI.WebControls.Unit.Pixel(30);
            cc.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            cc.Settings.AllowDragDrop = DefaultBoolean.False;
            cc.Settings.AllowSort = DefaultBoolean.False;
            cc.ShowInCustomizationForm = false;
            cc.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            cc.SetDataItemTemplateContent(c =>
                {

                    if (haveEdit || haveView)
                    {
                        Html.DevExpress().HyperLink(hl =>
                            {
                                hl.Properties.ImageUrl = Url.Content("~/Images/edit10x10.png");
                                hl.ToolTip = "Изменить данные о важности (приоритете)";
                                if (haveEdit)
                                {
                                    hl.NavigateUrl = DevExpressHelper.GetUrl(new { Controller = "AnaliticContractPriority", Action = "Open", id = DataBinder.Eval(c.DataItem, "Id") });
                                    hl.Properties.Target = "_blank";
                                }
                                else
                                {
                                    hl.Properties.ImageUrl = Url.Content("~/Images/search_x10.png");
                                    hl.NavigateUrl = DevExpressHelper.GetUrl(new { Controller = "AnaliticContractPriority", Action = "Preview", id = DataBinder.Eval(c.DataItem, "Id") });
                                    hl.Properties.Target = "_blank";
                                }
                            }).Render();
                    }
                    if (haveDelete)
                    {
                        Html.DevExpress().HyperLink(hl =>
                            {
                                hl.Properties.ImageUrl = Url.Content("~/Images/DELETEDELEMENT_X16.png");
                                hl.ToolTip = "Удалить данные о важности (приоритете)";
                                hl.NavigateUrl = "javascript:deleteRow(" + c.ItemIndex.ToString(CultureInfo.InvariantCulture) + ");";
                                hl.Enabled = haveDelete;
                            }).Render();
                    }
                });
        }
    });
    
    settings.Columns.Add(col =>
    {
        col.Caption = "Код";
        col.FieldName = "Code";
        col.Width = 50;
        col.Visible = false;
        col.Settings.AllowAutoFilter = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.BeginsWith;
        col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "Группа";
        column.FieldName = GlobalPropertyNames.DefaultGroup;
        column.Settings.AllowDragDrop = DefaultBoolean.True;
        column.Settings.AllowSort = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        column.Width = 200;
        column.Visible = false;
        column.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    });
    if (DocumentsWeb.Code.LayoutHelper.GetCurrentSetting(Url.RequestContext.RouteData.Values["controller"].ToString()).Current.ShowLinkInName)
    {
        settings.Columns.Add(col =>
        {
            col.FieldName = GlobalPropertyNames.Name;
            col.Caption = "Наименование";
            col.Width = 350;
            col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            col.SetDataItemTemplateContent(c => Html.DevExpress().HyperLink(s =>
                {
                    s.Properties.Text = (string)DataBinder.Eval(c.DataItem, "Name");
                    int id = (int)DataBinder.Eval(c.DataItem, "Id");
                    s.NavigateUrl = "javascript:ShowPopupEdit(" + id + ")";
                    s.ToolTip = "Изменить данные о категории";

                }).Render());
        });
    }
    else
    {
        settings.Columns.Add(col =>
        {
            col.FieldName = GlobalPropertyNames.Name;
            col.Caption = "Наименование";
            col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            col.Width = 350;
            col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
        });
    }

    

    settings.Columns.Add(col =>
    {
        col.FieldName = GlobalPropertyNames.DisplayMemo;
        col.Caption = "Примечание";
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.Width = 400;
        col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    });

    if (WADataProvider.CurrentUserCompanyMultyCount())
    {
        settings.Columns.Add(col =>
        {
            col.FieldName = GlobalPropertyNames.MyCompanyName;
            col.Caption = "Компания";
            col.Settings.AutoFilterCondition = AutoFilterCondition.BeginsWith;
            col.Width = 200;
            col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
        });
    }

    settings.Columns.Add(col =>
    {
        col.FieldName = GlobalPropertyNames.StateName;
        col.Caption = "Состояние";
        col.Settings.AutoFilterCondition = AutoFilterCondition.BeginsWith;
        col.Width = 75;
        col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    });
    settings.Columns.Add(col =>
    {
        col.Caption = "Ид состояния";
        col.FieldName = GlobalPropertyNames.StateId;
        col.Width = 75;
        col.Visible = false;
        col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    });

    MVCxGridViewColumn colDateModified = settings.Columns.Add(GlobalPropertyNames.DateModified, "Дата изменения");
    colDateModified.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    colDateModified.Width = 150;
    colDateModified.Visible = false;
    colDateModified.ColumnType = MVCxGridViewColumnType.DateEdit;
    colDateModified.PropertiesEdit.DisplayFormatString = "dd.MM.yyyy hh:mm";
    colDateModified.Settings.AutoFilterCondition = AutoFilterCondition.GreaterOrEqual;

    MVCxGridViewColumn colUserName = settings.Columns.Add(GlobalPropertyNames.UserName, "Пользователь");
    colUserName.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
    colUserName.Width = 100;
    colUserName.Visible = false;

    if (User.IsInRole(Uid.GROUP_GROUPWEBADMIN))
    {
        settings.Columns.Add(col =>
        {
            col.Caption = "Ид";
            col.FieldName = GlobalPropertyNames.Id;
            col.Visible = false;
            col.CellStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            col.Width = 100;
        });
    }
    
    settings.SetPagerBarTemplateContent(c => Html.RenderPartial("TablePager", new ViewDataDictionary
        {
            { "ContentObject", c },
            { "TableCaption", "<b><a href=\"" + Url.Action("Index", new { area = "Analitics", controller = "Home", action = "Index" }) + "\"  title=\"Перейти к выбору всех справочников имеющих отношение к аналитике\">Аналитика</a>\\Важность</b>" }
        }));

    settings.SettingsCookies.Enabled = true;
    settings.SettingsCookies.CookiesID = Url.RequestContext.RouteData.Values["controller"] + "Grid";
    
    settings.ClientSideEvents.Init = "function(s, e) { window.setTimeout(AdjustGridSize, 12);}";
    settings.ClientSideEvents.EndCallback = "function(s, e) { AdjustGridSize(); }";
    settings.ClientSideEvents.ColumnResizing = "function (s, e) {if (e.column.name == 'colImageAction') {e.cancel = true;}}";
    
    settings.CustomCallback = (sender, e) =>
    {
        MVCxGridView grid = (MVCxGridView)sender;
        string refreshArg = e.Parameters.Split('&').FirstOrDefault(s => s.StartsWith("refresh"));
        bool refresh = (refreshArg != null) && (refreshArg.EndsWith("true"));
        if (refresh)
        {
            int[] roots = Utils.GetHieRoots(settings);
            if (roots.Contains(0))
            {
                CoreController<Analitic> c = (CoreController<Analitic>)ViewContext.Controller;
                grid.DataSource = AnaliticModel.GetCollection(HierarchyModel.GetLinkedHierarchies(c.RootHierachy, HierarchyModel.FILTER_HIERARCHY_CHAIN).Select(s => s.Code).ToArray(), true);
            }
            else
            {
                grid.DataSource = AnaliticModel.GetCollectionWONested(roots);
            }
            grid.DataBind();
        }
    };

    
}).Bind(Model).GetHtml()