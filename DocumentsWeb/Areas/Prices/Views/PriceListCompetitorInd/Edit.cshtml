@using BusinessObjects.Security
@using DocumentsWeb.Areas.Prices.Models
@using BusinessObjects;
@using DocumentsWeb.Models
@model DocumentPriceListModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Model.Name;
    string helpDefaultLink = string.Empty;
    if (ViewData.ContainsKey("HelpDefaultLink"))
    {
        helpDefaultLink = ViewData["HelpDefaultLink"].ToString();
    }
    bool hasPopupHelp = false;
    if (ViewData.ContainsKey("HelpHasPopup"))
    {
        hasPopupHelp = (bool)ViewData["HelpHasPopup"];
    }
    string gridStyle = "dxgvControl_" + Utils.CurrentTheme;
}
<script src="@Url.Content("~/Scripts/pricelists/docpricelistcompetitorind.js")" type="text/javascript"></script>
@Html.Partial("HeadPartial")
<script type="text/javascript">
    var hasCustomHelp = '@hasPopupHelp';
    var globalNotReadOnly = '!@Model.IsReadOnly';
    function OnMenuItemMouseOver(s, e) {
            switch (e.item.name) {
            case "mnuHelp":
                if (hasCustomHelp) {
                    $(function() {
                        $.get('@Url.Action("DenamdHelp")', function(data) { $('#HelpPanel').replaceWith(data); });
                    });
                }
                break;
            }
        }    
    function OnMenuItemClick(s, e) {
        switch (e.item.name) {
        case "mnuClose":
            window.open('', '_self', '');
            window.close();
            break;
        case "mnuSave":
            document.getElementById('documentEditForm').submit();
            break;
        case "mnuConduct":
            document.getElementById('StateId').value=@State.STATEACTIVE;
            alert("Документ будет проведен после сохранения");
            break;
        case "mnuIgnore":
            document.getElementById('StateId').value=@State.STATEDEFAULT;
            alert("Изменения будут применены после сохранения");
            break;
        case "mnuBlock":
            document.getElementById('IsReadOnly').value=true;
            alert("Документ будет заблокирован после сохранения");
            break;
        case "mnuUnblock":
            document.getElementById('IsReadOnly').value=false;
            mEdit.GetItemByName("mnuSave").SetEnabled(true);
            alert("Изменения будут применены после сохранения");
            break;
        case "mnuPrint":
            break;
        }
    }

    function AgentFromId_ButtonClick(s, e) {
        switch(e.buttonIndex){
        case 0:
            pcEdit.SetContentUrl('@DevExpressHelper.GetUrl(new { Area = "Agents", Controller = "Byer", Action = "Edit" })/0');
            pcEdit.Show();
            break;
        case 1:
            pcEdit.SetContentUrl('@DevExpressHelper.GetUrl(new { Area = "Agents", Controller = "Byer", Action = "Edit" })/' + MainClientDepatmentId.GetValue());
            pcEdit.Show();
            break;
        }
    }
    function MyCompanyId_Changed(s, e) {
        MainClientDepatmentId.PerformCallback();
        MainCompanyDepatmentId.PerformCallback();
    }
    function ProductId_SelectedIndexChanged(s, e) {
        var id=ProductId.GetValue();
        $.post('@DevExpressHelper.GetUrl(new { Area="Products", Controller = "Product", Action = "GetProductInfo" })',{id:id}).success(function (data) {
                ProductNomenclatureId.AddItem(data.nom, id);
                ProductNomenclatureId.SetValue(id);
            });
    }
    function ProductNomenclatureId_SelectedIndexChanged(s,e){
        var id=ProductNomenclatureId.GetValue();
        $.post('@DevExpressHelper.GetUrl(new { Area="Products", Controller = "Product", Action = "GetProductInfo" })',{id:id}).success(function (data) {
                ProductId.AddItem(data.name, id);
                ProductId.SetValue(id);
            });
    }
</script>

@Html.DevExpress().Menu(settings =>
{
    settings.EnableHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Name = "mEdit";
    settings.ClientSideEvents.ItemClick = "OnMenuItemClick";
    settings.ClientSideEvents.ItemMouseOver = "OnMenuItemMouseOver";

    settings.Items.Add(item =>
    {
        item.Name = "mnuClose";
        item.Text = "Закрыть";
        item.ToolTip = "Закрыть текущий документ без сохранения";
        item.Image.Url = @Url.Content("~/Images/cross.png"); 
    });
    settings.Items.Add(item =>
    {
        item.Name = "mnuSave";
        item.Text = "Сохранить";
        item.ToolTip = "Сохранить текущий документ возможно если заполнены все необходимые данные, требуемые для корректного оформления документа. Для больших документов рекомендуется сохраняться как можно чаще";
        item.ClientEnabled = !Model.IsReadOnly;
        item.Image.Url = @Url.Content("~/Images/SAVE_X16.png"); 
    });
    settings.Items.Add(item =>
    {
        item.Name = "mnuConduct";
        item.Text = "Провести";
        item.ToolTip = "В отчетной системе в учитываются только проведенные документы! При создании нового документа от автоматически считается проведенным!";
        item.Enabled = (!Model.IsReadOnly) && Model.StateId != State.STATEACTIVE && Model.Id != 0;
        item.ClientVisible = item.Enabled;
        item.Image.Url = @Url.Content("~/Images/OK_X16.png");
    });
    
        settings.Items.Add(item =>
        {
            item.Name = "mnuIgnore";
            item.Text = "Не учитывать";
            item.ToolTip = "Снятие документа с учета исключает данные документа из большинства отчетов. Используйте для требования внести изменения в документ пользователями или операторами!";
            item.Enabled = (Model.StateId == State.STATEACTIVE) && (!Model.IsReadOnly) && Model.Id != 0;
            item.ClientVisible = item.Enabled;
            item.Image.Url = @Url.Content("~/Images/ROLLBACKRED_X16.png");
        });

        if (WADataProvider.FolderElementRightView.IsAllow(Right.DOCLOCK, WADataProvider.WA.GetFolderByCodeFind(Folder.CODE_FIND_PRICES_COMPETITORIND).Id))
        {
            settings.Items.Add(item =>
                {
                    item.Name = "mnuBlock";
                    item.Text = "Заблокировать";
                    item.ToolTip = "Блокировка документа от дальнейших изменений. Блокировку могут снять только администраторы системы.";
                    item.Enabled = Model.IsReadOnly && Model.Id != 0;
                    item.ClientVisible = item.Enabled;
                    item.Image.Url = @Url.Content("~/Images/SECURITY_X16.png");
                });
        }
        if (WADataProvider.FolderElementRightView.IsAllow(Right.DOCUNLOCK, WADataProvider.WA.GetFolderByCodeFind(Folder.CODE_FIND_PRICES_COMPETITORIND).Id))
    {
        settings.Items.Add(item =>
        {
            item.Name = "mnuUnblock";
            item.Text = "Разблокировать";
            item.ToolTip = "Разблокировка документа для возможности внесения изменений в документ. Разблокировать документ могут только администраторы системы.";
            item.Enabled = Model.IsReadOnly;
            item.Image.Url = @Url.Content("~/Images/UNLOCK16.png");
        });
    }
    List<Library> printForms = ViewData["PrintForms"] as List<Library>;

    if (printForms != null)
    {
        switch (printForms.Count)
        {
            case 0:
                break;
            case 1:
                settings.Items.Add(item =>
                {
                    item.Name = "mnuPrint";
                    item.Text = "Печать";
                    item.Image.Url = @Url.Content("~/Images/PRINT_X16.png");
                    item.Target = "_blank";
                    item.NavigateUrl = DevExpressHelper.GetUrl(new
                    {
                        Controller = Url.RequestContext.RouteData.Values["controller"].ToString(),
                        Action = "PrintDefault",
                        Area = "Prices",
                        documentId = Model.Id
                    });

                });
                break;
            default:
                MVCxMenuItem itemPrint = new MVCxMenuItem { Name = "mnuPrint", Text = "Печать", Image = { Url = Url.Content("~/Images/PRINT_X16.png") } };
                settings.Items.Add(itemPrint);
                foreach (Library form in printForms)
                {
                    Library lib = form;
                    itemPrint.Items.Add(subItem =>
                    {
                        subItem.Name = "mnuPrint";
                        subItem.Text = lib.Name;
                        subItem.Target = "_blank";
                        subItem.NavigateUrl = DevExpressHelper.GetUrl(new
                        {
                            Controller = Url.RequestContext.RouteData.Values["controller"].ToString(),
                            Action = "Print",
                            Area = "Prices",
                            documentId = Model.Id,
                            printFormId = lib.Id
                        });
                        if (!string.IsNullOrEmpty(lib.Memo))
                            subItem.ToolTip = lib.Memo;
                    });
                }
                break;
        }
    }
    if (!string.IsNullOrEmpty(helpDefaultLink))
    {

        settings.Items.Add(item =>
        {
            item.Name = "mnuHelp";
            item.Text = "Помощь";
            item.ToolTip = "Показать справочную документацию по работе с документом";
            item.Image.Url = Url.Content("~/Images/HELP_X16.gif");
            if (hasPopupHelp)
            {
                item.SetSubMenuTemplateContent(content => ViewContext.Writer.Write("<div id=\"HelpPanel\"></div>"));
            }
            else
            {
                item.NavigateUrl = helpDefaultLink.StartsWith("~/") ? Url.Content(helpDefaultLink) : helpDefaultLink;
            }
            item.Target = "_blank";
        });
    }
}).GetHtml()

@using (Html.BeginForm("Edit", "PriceListCompetitorInd", FormMethod.Post, new { @class = "edit_form", @id = "documentEditForm" }))
{
    @Html.DevExpress().Splitter(settings =>
{
    settings.Name = "splFullScreenMode";
    settings.Orientation = System.Web.UI.WebControls.Orientation.Vertical;
    settings.Styles.Pane.Paddings.Padding = 0;
    settings.FullscreenMode = true;

    settings.Panes.Add(contentMain =>
    {
        contentMain.Panes.Add(actionsPane =>
        {
            actionsPane.Name = "ActionPane";
            actionsPane.Size = 270;
            actionsPane.MinSize = 270;
            actionsPane.MaxSize = 400;
            actionsPane.AllowResize = DefaultBoolean.True;
            actionsPane.ShowCollapseBackwardButton = DefaultBoolean.False;
            actionsPane.ScrollBars = System.Web.UI.WebControls.ScrollBars.Auto;
            actionsPane.PaneStyle.CssClass = gridStyle;
            actionsPane.SetContent(() => Html.RenderPartial("ActionsPartial", Model));
        });

        contentMain.Panes.Add(contentPane =>
        {
            contentPane.Name = "ContentPane";
            contentPane.ScrollBars = System.Web.UI.WebControls.ScrollBars.Auto;
            contentPane.SetContent(() => @Html.RenderPartial("EditPartial", Model));
        });
        settings.Panes.Add(footerPane =>
        {
            footerPane.Size = 80;
            footerPane.AllowResize = DefaultBoolean.False;
            footerPane.ShowSeparatorImage = DefaultBoolean.False;
            footerPane.SetContent(() => @Html.RenderPartial("FooterDocumentPartial"));
        });
    });
}).GetHtml()
<div id="popupDivFinderProduct"></div>
}



@Html.Partial("ProductsFinderPartial", new ViewDataDictionary { 
    { "Name", "ProductsFinder" },
    { "ComboboxName", "ProductId" },
    { "NomComboboxName", "ProductNomenclatureId" },
    { "ComboboxButtonIndex", 0 }
    //{ "showOnlyProducts", true },    
});